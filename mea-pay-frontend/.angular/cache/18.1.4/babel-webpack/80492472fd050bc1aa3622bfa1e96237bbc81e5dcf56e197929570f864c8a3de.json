{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user-auth.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    httpclient;\n    userAuthService;\n    PATH_OF_API = 'http://localhost:9090';\n    requestHeader = new HttpHeaders({\n      'No-Auth': 'True'\n    });\n    constructor(httpclient, userAuthService) {\n      this.httpclient = httpclient;\n      this.userAuthService = userAuthService;\n    }\n    register(registerData) {\n      return this.httpclient.post(this.PATH_OF_API + '/registerNewUser', registerData, {\n        headers: this.requestHeader\n      });\n    }\n    login(loginData) {\n      return this.httpclient.post(this.PATH_OF_API + '/authenticate', loginData, {\n        headers: this.requestHeader\n      });\n    }\n    forUser() {\n      return this.httpclient.get(this.PATH_OF_API + '/forUser', {\n        responseType: 'text'\n      });\n    }\n    forAdmin() {\n      return this.httpclient.get(this.PATH_OF_API + '/forAdmin', {\n        responseType: 'text'\n      });\n    }\n    roleMatch(allowedRoles) {\n      let isMatch = false;\n      const userRoles = this.userAuthService.getRoles();\n      if (userRoles != null && userRoles) {\n        for (let i = 0; i < userRoles.length; i++) {\n          for (let j = 0; j < allowedRoles.length; j++) {\n            if (userRoles[i].roleName === allowedRoles[j]) {\n              isMatch = true;\n              return isMatch;\n            } else {\n              return isMatch;\n            }\n          }\n        }\n      }\n    }\n    static ɵfac = function UserService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserAuthService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}