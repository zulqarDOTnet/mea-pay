{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/user-auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    userAuthService;\n    router;\n    constructor(userAuthService, router) {\n      this.userAuthService = userAuthService;\n      this.router = router;\n    }\n    intercept(req, next) {\n      if (req.headers.get('No-Auth') === 'True') {\n        return next.handle(req.clone());\n      }\n      const token = this.userAuthService.getToken();\n      req = this.addToken(req, token);\n      return next.handle(req).pipe(catchError(err => {\n        console.log(err.status);\n        if (err.status === 401) {\n          this.router.navigate(['/login']);\n        } else if (err.status === 403) {\n          this.router.navigate(['/forbidden']);\n        }\n        return throwError(\"Some thing is wrong\");\n      }));\n    }\n    addToken(request, token) {\n      return request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    static ɵfac = function AuthInterceptor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthInterceptor)(i0.ɵɵinject(i1.UserAuthService), i0.ɵɵinject(i2.Router));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}